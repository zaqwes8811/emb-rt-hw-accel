############################# apps

Image:
rot90
https://www.scarabhardware.com/forums/topic/live-video-rotation/

#################### links

https://docs.numato.com/kbcategory/embedded-linux/

############################## math

# Знаковые операции
http://www.uccs.edu/~gtumbush/published_papers/Tumbush%20DVCon%2005.pdf
http://web.mit.edu/6.111/www/f2012/handouts/L08.pdf  - from MIT

# Gotchas
http://www.sutherland-hdl.com/papers/2006-SNUG-Boston_standard_gotchas_presentation.pdf

# Altera hdl code styles
http://www.gstitt.ece.ufl.edu/courses/spring10/eel4712/lectures/vhdl/qts_qii51007.pdf

##################### Impl spec
mem burst? ddr

###################### OpenCL
https://streamcomputing.eu/blog/2014-09-16/use-opencl-fpgas/

Space is used for the BSP and Verilog is generated, so it is not fully optimised for space. Still 95% of max performance is reachable, and that within a lot less development time. Altera describes OpenCL to do system-design and Verilog to do IP-design.

Pro:
https://www.quora.com/How-is-the-prospect-of-OpenCL-on-FPGA

"steep learning curve"

Кажется для GPU-CPU-cluster - good enough(?)
http://www.openclblog.com/

http://ersaconf.org/ersa12/papers/Brown-opencl-for-fpgas.pdf

######################## design flow

# image processing
https://www.quora.com/How-do-I-do-image-processing-using-Verilog-on-FPGA

Read bitmap
https://fpga4student.blogspot.ru/2016/11/image-processing-on-fpga-verilog.html

Blurring
http://blog.teledynedalsa.com/2012/05/image-filtering-in-fpgas/

Arch:
http://biorob2.epfl.ch/pages/studproj/birg67936/rapport.pdf
- наши записывают дексрипторы с размерами и адресами куда положить
- http://www.eit.lth.se/fileadmin/eit/home/scd.vow/theses/Thesis-Hugo.pdf


Need:
- Image proc - ML (classifiers/ANN)

# thinks

################################ de0 nano
//
//
// Global target
//
//
- First!!:
  пописать дрова для linux - ldd, etc.
  уверенное знание Verilog/FPGA

  fpga железо можно попроще
- Second:
  speed up algorithms(opencv, etc.) with SIMD/Multicores/GPU/FPGA

//
//
// FPGA <-> CPU Challenge
//
//
- see as PICe device if possible
  http://electronics.stackexchange.com/questions/97085/gpio-pcie-programing
  GPIO - "couple MHz" even less - похоже не правда
- user fpga external ram
- use Avalon internal

Можно USB
- внешная физика и дрова, можно без raspbery - дрова писать не нужно
  да и не думаю что потяну
- взять стек и через выводы fpga подключить

Можно разделить
- дрова писать учиться на gpio
- обработка данных - USB

!! можно через GPIO, похоже нет - забъет процессор

fixme: нужны пробелы между пакетами, хотя бы пара тактов, не разделить
если идут части байтов

можно сделать DMA на стороне fpga, а читать как в SPI, но по прерыванию
очередь с приема, очередь на передачу с генерацией прерывания

- "The primary goal is to establish a reliable link-up between CPU and FPGA."
http://www.eetimes.com/document.asp?doc_id=1274649
- spi в этих трех нету 
"DMA is not possible using a PIO interface,"
"In essence, the embedded processor becomes a glorified data mover"
если через GPIO - занимаем процессор отношение=вычисления/IO должно быть очень маленьким
https://www.altera.co.jp/ja_JP/pdfs/literature/hb/nios2/external_processor_if.pdf

fixme: Av-ST or/and Av-MM ?
fixme: зачем адреса?
fixme: прочитать и понять откуда столько проблем? в даташите алтеры
  можно прямо соединить
http://robotics.ee.uwa.edu.au/theses/2009-Embedded-FPGA-Geier.pdf

- "The secondary goal is the development of an internal storage 
architecture for the FPGA."

- захват сигнала, шина не будет 8 бит в одну сторону 8 в другую

- device as slave (?) генерирует только прерывание, но сама данные не шлет
- один тактовый сигнал от мастера, и на чтение и на запись(?), он может дрожать и сильно

- Two clock domains(?) 

//
//
// Plan:
//
//
- писать софтовые ядра с Avalon интерфейсом - учить Verilog
- писать простые драйвера - обработка прерывании ипт
- использовать стандартные интерфейсы - SPI/USB/?
// Troubles:
- подумать над интерфейсом - сложно, наверное очень
- через какое-то время понять как можно состыковать в железе
  на высокой скорости
- свой С++/STL аллокатор
